// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TicketManagementSystem_CAA.Models;

public partial class tmsContext : DbContext
{
    public tmsContext(DbContextOptions<tmsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<ProgressNotification> ProgressNotifications { get; set; }

    public virtual DbSet<Severitylvl> Severitylvls { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TicketResponse> TicketResponses { get; set; }

    public virtual DbSet<Tstatus> Tstatuses { get; set; }

    public virtual DbSet<Users1> Users1s { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AId).HasName("PK__admin__566AFA9A8586C014");

            entity.ToTable("admin");

            entity.Property(e => e.AId).HasColumnName("a_id");
            entity.Property(e => e.Adminname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("adminname");
            entity.Property(e => e.Cnic)
                .IsRequired()
                .HasMaxLength(13)
                .HasColumnName("CNIC");
            entity.Property(e => e.DId).HasColumnName("d_id");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("date_deleted");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Mobileno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("mobileno");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("password");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("role");

            entity.HasOne(d => d.DIdNavigation).WithMany(p => p.Admins)
                .HasForeignKey(d => d.DId)
                .HasConstraintName("FK__admin__d_id__5629CD9C");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DId).HasName("PK__departme__D95F582BC090DBBB");

            entity.ToTable("department");

            entity.Property(e => e.DId)
                .ValueGeneratedNever()
                .HasColumnName("d_id");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("date_deleted");
            entity.Property(e => e.Ldesc)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("ldesc");
            entity.Property(e => e.Sdesc)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("sdesc");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__feedback__3213E83F5021EC41");

            entity.ToTable("feedback");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.DateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.Feedback1)
                .IsRequired()
                .HasColumnName("feedback");
            entity.Property(e => e.TicketId).HasColumnName("ticket_id");

            entity.HasOne(d => d.Ticket).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.TicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__feedback__ticket__3D2915A8");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3214EC076E4574DE");

            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(255);

            entity.HasOne(d => d.Ticket).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.TicketId)
                .HasConstraintName("FK_Notifications_Tickets");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notifications_Users");
        });

        modelBuilder.Entity<ProgressNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Progress__3214EC0750E0AE66");

            entity.Property(e => e.AdminId).HasColumnName("adminId");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(255);

            entity.HasOne(d => d.Admin).WithMany(p => p.ProgressNotifications)
                .HasForeignKey(d => d.AdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notifications_Admins");
        });

        modelBuilder.Entity<Severitylvl>(entity =>
        {
            entity.HasKey(e => e.Lvlid).HasName("PK__severity__467F692F3120E643");

            entity.ToTable("severitylvl");

            entity.Property(e => e.Lvlid)
                .ValueGeneratedNever()
                .HasColumnName("lvlid");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("date_deleted");
            entity.Property(e => e.Ldesc)
                .HasMaxLength(255)
                .HasColumnName("ldesc");
            entity.Property(e => e.Sdesc)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("sdesc");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.TId).HasName("PK__ticket__E579775F4C7ED757");

            entity.ToTable("ticket");

            entity.Property(e => e.TId)
                .ValueGeneratedNever()
                .HasColumnName("t_id");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("date_deleted");
            entity.Property(e => e.DateTime)
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.LDescription).HasColumnName("l_description");
            entity.Property(e => e.Lvlid).HasColumnName("lvlid");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("reason");
            entity.Property(e => e.SId).HasColumnName("s_id");
            entity.Property(e => e.TTitle)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("t_title");
            entity.Property(e => e.UId).HasColumnName("u_id");

            entity.HasOne(d => d.AssignedToAdminNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.AssignedToAdmin)
                .HasConstraintName("FK_Ticket_AssignedToAdmin");

            entity.HasOne(d => d.AssignedToDepartmentNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.AssignedToDepartment)
                .HasConstraintName("FK_Ticket_AssignedToDepartment");

            entity.HasOne(d => d.Lvl).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.Lvlid)
                .HasConstraintName("FK__ticket__lvlid__5812160E");

            entity.HasOne(d => d.SIdNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.SId)
                .HasConstraintName("FK__ticket__s_id__59063A47");

            entity.HasOne(d => d.UIdNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.UId)
                .HasConstraintName("FK__ticket__u_id__571DF1D5");
        });

        modelBuilder.Entity<TicketResponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ticket_r__3213E83F3C4A69CE");

            entity.ToTable("ticket_response");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AId).HasColumnName("a_id");
            entity.Property(e => e.DId).HasColumnName("d_id");
            entity.Property(e => e.DateTime)
                .HasColumnType("datetime")
                .HasColumnName("date_time");
            entity.Property(e => e.RBody)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("r_body");
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("role");
            entity.Property(e => e.SId).HasColumnName("s_id");
            entity.Property(e => e.TId).HasColumnName("t_id");
            entity.Property(e => e.UId).HasColumnName("u_id");

            entity.HasOne(d => d.AIdNavigation).WithMany(p => p.TicketResponses)
                .HasForeignKey(d => d.AId)
                .HasConstraintName("FK__ticket_res__a_id__03F0984C");

            entity.HasOne(d => d.DIdNavigation).WithMany(p => p.TicketResponses)
                .HasForeignKey(d => d.DId)
                .HasConstraintName("FK__ticket_res__d_id__05D8E0BE");

            entity.HasOne(d => d.SIdNavigation).WithMany(p => p.TicketResponses)
                .HasForeignKey(d => d.SId)
                .HasConstraintName("FK__ticket_res__s_id__06CD04F7");

            entity.HasOne(d => d.TIdNavigation).WithMany(p => p.TicketResponses)
                .HasForeignKey(d => d.TId)
                .HasConstraintName("FK__ticket_res__t_id__02FC7413");

            entity.HasOne(d => d.UIdNavigation).WithMany(p => p.TicketResponses)
                .HasForeignKey(d => d.UId)
                .HasConstraintName("FK__ticket_res__u_id__04E4BC85");
        });

        modelBuilder.Entity<Tstatus>(entity =>
        {
            entity.HasKey(e => e.SId).HasName("PK__tstatus__2F3684F471A245CD");

            entity.ToTable("tstatus");

            entity.Property(e => e.SId)
                .ValueGeneratedNever()
                .HasColumnName("s_id");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("date_deleted");
            entity.Property(e => e.Ldesc)
                .HasMaxLength(255)
                .HasColumnName("ldesc");
            entity.Property(e => e.Sdesc)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("sdesc");
        });

        modelBuilder.Entity<Users1>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("PK__users1__DD7012640988EF5E");

            entity.ToTable("users1");

            entity.Property(e => e.Uid).HasColumnName("uid");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .HasColumnName("address");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("city");
            entity.Property(e => e.Cnic)
                .IsRequired()
                .HasMaxLength(16)
                .HasColumnName("CNIC");
            entity.Property(e => e.DateDeleted)
                .HasColumnType("datetime")
                .HasColumnName("date_deleted");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Mobileno).HasColumnName("mobileno");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("password");
            entity.Property(e => e.Province)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("province");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}